length(unique(cafe$order_id))
unique(cafe$order_date)
mon_cafe <- cafe %>%
group_by(substr(order_date, 1, 7)) %>%
summarise(n_cate = n(category))
# 카페에서 가장 많이 판매된 메뉴는 무엇인가?
table(cafe$item)
## 내림차순 정렬
sort(tabel(cafe$item))
## 내림차순 정렬
sort(table(cafe$item), decreasing = T)
mon_cafe <- cafe %>%
group_by(substr(order_date, 1, 7)) %>%
summarise(n_iem = n(item))
mon_cafe <- cafe %>%
group_by(substr(order_date, 1, 7)) %>%
summarise(n_item = sum(item))
mon_cafe <- cafe %>%
group_by(substr(order_date, 1, 7), item) %>%
summarise(n_item = n(item))
cafe_item <- data.frame(table(cafe$item))
View(cafe_item)
head(cafe_item)
sales_item <- subset.data.frame(cafe, select = c('item', 'price'))
sales_item
head(sales_item)
sales_item <- unique(sales_item)
sales_item
sort(sales_item$price)
sales_item
# 요일별 판매한 메뉴는 무엇인가?
?weekdays
## 요일을 담는 파생변수 생성
cafe$weekday <- weekdays(cafe$order_date)
head(cafe)
table(cafe$weekday)
## cafe$info <- ifelse(조건식, 참, 거짓)
date_info <- data.frame(weekday = c('월요일', '화요일', '수요일', '목요일',
'금요일', '토요일', '일요일'),
day = c('평일', '평일', '평일', '평일', '평일', '주말', '주말'))
date_info
## 두개의 데이터 프레임을 합치는 작업
cafe <- merge(cafe, date_info)  # 같은 컬럼이 존재하면 by 생략 가능
cafe
head(cafe)
table(cafe$day)
# 계절별로 판매되는 메뉴는 무엇인가?
cafe$month <- months(cafe$order_date)
head(cafe)
# 봄(3-5), 여름(6-8), 가을(9-11), 겨울(12-2)
## 파생변수 season : 봄, 여름, 가을, 겨울
season_info <- data.frame(month = c('1월', '2월', '3월', '4월', '5월', '6월',
'7월', '8월', '9월', '10월', '11월', '12월'),
season = c('겨울', '겨울', '봄', '봄', '봄', '여름', '여름', '여름',
'가을', '가을', '가을', '겨울'))
season_info
cafe <- merge(cafe, season_info)
head(cafe)
table(cafe$saeson)
table(cafe$season)
season_item <- cafe %>%
group_by(season)
group_by(cafe$season)
season_item <- cafe %>%
group_by(season) %>%
summarise(n_item = n(item))
season_item <- cafe %>%
group_by(season, item) %>%
summarise(n_item = n(item))
# 매출현황
## 카테고리별 판매 건수를 확인
cafe %>%
group_by(category) %>%
summarise(n_category = n(category))
# 매출현황
## 카테고리별 판매 건수 시각화
## 월별 판매 건수를 시각화
## 요일별 판매 건수를 시각화
cafe %>%
group_by(category) %>%
summarise(n_cate = n(category))
# 매출현황 시각화 작업
library(ggplot2)
# 매출현황 시각화 작업
library(ggplot2)
season_item <- cafe %>%
group_by(season, item)
season_item <- cafe %>%
group_by(season, item) %>%
summarise(n(item))
season_item <- cafe %>%
group_by(season, item) %>%
summarise(n(item))
## 카테고리별 판매 건수 시각화
n_cate <- cafe %>%
group_by(category) %>%
summarise(n(category))
## 카테고리별 판매 건수 시각화
n_cate <- cafe %>%
group_by(category) %>%
summarise(n(item))
head(cafe)
season_item <- cafe %>%
group_by(season) %>%
summarise(n_item = n())
season_item <- cafe %>%
group_by(season) %>%
summarise(n_item = n(item))
season_item <- cafe %>%
group_by(season) %>%
count(ietm)
season_item <- cafe %>%
group_by(season) %>%
count(item)
group_by(cafe$season)
library(dplyr)
season_item <- cafe %>%
group_by(season) %>%
summarise(n_item = n(item))
## 카테고리별 판매 건수 시각화
n_cate <- cafe %>%
group_by(category) %>%
summarise(cnt = n())
n_cate
season_item <- cafe %>%
group_by(season) %>%
summarise(n_item = n(item))
season_item <- cafe %>%
group_by(season) %>%
summarise(n_item = n())
season_iem
season_item
season_item <- cafe %>%
group_by(season, item) %>%
summarise(n_item = n())
season_item
n_cate
ggplot(n_cate, aes(x = category, y = cnt)) + geom_bar()
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col()
ggplot(n_cate, aes(x = category, y = reorder(cnt))) + geom_col()
ggplot(n_cate, aes(x = category, y = reorder(cnt)) + geom_col()
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col()
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col()
## 월별 판매 건수를 시각화
n_month <- cafe %>%
group_by(month, item) %>%
summarise(cnt = n(item))
## 월별 판매 건수를 시각화
n_month <- cafe %>%
group_by(month, item) %>%
summarise(cnt = n())
n_month
ggplot(n_month, aes(x = month, y = cnt)) + geom_col()
ggplot(n_month, aes(x = c(month, item), y = cnt)) + geom_col()
ggplot(n_month, aes(x = month, y = cnt)) + geom_col()
season_item
n_month
n_month
head(cafe)
## 요일별 판매 건수를 시각화
n_day <- cafe %>%
group_by(weekday, item) %>%
summarise(cnt = n(item))
## 요일별 판매 건수를 시각화
n_day <- cafe %>%
group_by(weekday, item) %>%
summarise(cnt = n())
n_day
n_cate
n_month
arrange(group_by(n_month$month), desc(cnt))
arrange(n_month$month, desc(cnt))
arrange(n_month$month, cnt)
arrange(n_month, cnt)
arrange(n_month, desc(cnt))
arrange(group_by(n_month$month), desc(cnt))
n_month %>%
group_by(month) %>%
arrange(desc(cnt), by_group = T)
n_day
## 요일별 판매 건수를 시각화
n_day <- cafe %>%
group_by(weekday) %>%
summarise(cnt = n(item))
## 요일별 판매 건수를 시각화
n_day <- cafe %>%
group_by(weekday) %>%
summarise(cnt = n())
n_day
ggplot(n_day, aes(x = weekday, y = cnt)) + geom_col()
n_month
## 월별 판매 건수를 시각화
n_month <- cafe %>%
group_by(month) %>%
summarise(cnt = n())
n_month
ggplot(n_month, aes(x = month, y = cnt)) + geom_col()
n_cate
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col()
arrange(n_cate, desc(cnt))
n_cate <- arrange(n_cate, desc(cnt))
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col()
n_cate
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col() +
scale_x_discrete(limits = c('coffee', 'Ade/Shake', 'Tea', ' Smoothie/Juice', 'Latte', 'Bakery'))
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col() +
scale_x_discrete(limits = c('coffee', 'Ade/Shake', 'Tea', 'Smoothie/Juice', 'Latte', 'Bakery'))
ggplot(n_month, aes(x = month, y = cnt)) + geom_col()
ggplot(n_month, aes(x = reorder(month, cnt), y = cnt)) + geom_col()
ggplot(n_cate, aes(x = reorder(category, cnt), y = cnt)) + geom_col() +
## 월별 판매 건수를 시각화
n_month <- cafe %>%
group_by(month) %>%
summarise(cnt = n())
ggplot(n_cate, aes(x = reorder(category, cnt), y = cnt)) + geom_col()
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col()
ggplot(n_cate, aes(x = category, cnt, y = cnt)) + geom_col()
ggplot(n_cate, aes(x = category, cnt, y = cnt)) + geom_col()
ggplot(n_cate, aes(x = reorder(category, cnt), y = cnt)) + geom_col()
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col()
ggplot(n_cate, aes(x = category, y = cnt)) + geom_col() +
scale_x_discrete(limits = c('coffee', 'Ade/Shake', 'Tea', 'Smoothie/Juice', 'Latte', 'Bakery'))
ggplot(n_cate, aes(x = reorder(category, cnt), y = cnt)) + geom_col()
ggplot(n_cate, aes(x = reorder(category, -cnt), y = cnt)) + geom_col()
ggplot(n_cate, aes(x = reorder(category, cnt), y = cnt)) + geom_col()
ggplot(n_cate, aes(x = reorder(category, -cnt), y = cnt)) + geom_col()
ggplot(n_month, aes(x = reorder(month, cnt), y = cnt)) + geom_col()
ggplot(n_month, aes(x = reorder(month, -cnt), y = cnt)) + geom_col()
ggplot(n_month, aes(x = month, y = cnt)) + geom_col()
ggplot(n_month, aes(x = month, y = cnt)) + geom_col() +
scale_x_discrete(limits = c('1월', '2월', '3월', '4월', '5월', '6월', '7월',
'8월', '9월', '10월', '11월', '12월'))
ggplot(n_day, aes(x = weekday, y = cnt)) + geom_col()
ggplot(n_day, aes(x = weekday, y = cnt)) + geom_col() +
scale_x_discrete(limits = c('화요일', '수요일', '목요일', '금요일', '토요일', '일요일'))
ggplot(n_day, aes(x = reorder(weekday, cnt), y = cnt)) + geom_col()
ggplot(n_day, aes(x = reorder(weekday, -cnt), y = cnt)) + geom_col()
season_item
season_item %>%
group_by(season) %>%
arrange(desc(n_item))
# 별도의 기억장소에 저장된 패키지 설치 방법 - github
install.packages('devtools')
# 패키지 설치
devtools::install_github('kilhwan/bizstatp')
# 패키지 로딩
library(bizstatp)
course
# 데이터 확인
str(course)
# 데이터 요약 보고서
summary(course)
# 변수들 간의 상관관계를 파악 - 산점도
plot(course)
# 수치형 데이터를 이용한 상관분석
plot(course[, 5:8])
# 범주형 변수의 기술통계
head(course)
# 절대빈도표 table(), xtabs()
## table(벡터) or table(데이터프레임$컬럼)
table(course$major)
xtabs(~ year, course)
xtabs(~, course)
xtabs(~ year, course)
xtabs(~ year, course, gender == 'M')
xtabs(~ year, course, class == 2)
# 상대빈도표
data <- xtabs(~year, course)
# 상대빈도표
dataYear <- xtabs(~year, course)
dataYear
dataMajor <- xtabs(~major, course)
dataMajor
dataGender <- xtabs(~gender, course)
dataGender
dataClass <- xtabs(~class, course)
dataClass
## 상대빈도표를 만드는 함수 : proportions(절대빈도표), prop.tabler()
### 학년과 성별에 대한 상대 빈도표
proportions(dateYear)
# 상대빈도표
dataYear <- xtabs(~year, course)
dataYear
## 상대빈도표를 만드는 함수 : proportions(절대빈도표), prop.tabler()
### 학년과 성별에 대한 상대 빈도표
proportions(dateYear)
## 상대빈도표를 만드는 함수 : proportions(절대빈도표), prop.tabler()
### 학년과 성별에 대한 상대 빈도표
proportions(dataYear)
round(proportions(dataYear), 2)
proportions(dataGender) * 100
## 막대 그래프
### ggplot(데이터, aes(번주형변수)) + geom_bar()
ggplot(course, aes(year)) + geom_bar(fill = 'orange')
### 상대 빈도를 이용해서 막대그래프를 그릴 때
### ggplot(데이터, aes(x = 범주형변수, y = after_stat(prop), group = 1)) + geom_bar()
ggplot(course, aes(year, after_stat(prop), group = 1)) + geom_bar()
str(mpg)
ggplot(mpg, aes(class)) + geom_bar()
ggplot(mpg, aes(class)) + geom_bar() + coord_flip()
## 빈도 순으로 막대를 표시하는 함수
### ggplot(데이터, aes(x = reorder(범주형변수, 범주형변수, length))) + geom_bar()
ggplot(mpg, aes(reorder(class, count)) + geom_bar() + coord_flip()
## 빈도 순으로 막대를 표시하는 함수
### ggplot(데이터, aes(x = reorder(범주형변수, 범주형변수, length))) + geom_bar()
ggplot(mpg, aes(reorder(class, class, length)) + geom_bar() + coord_flip()
## 빈도 순으로 막대를 표시하는 함수
### ggplot(데이터, aes(x = reorder(범주형변수, 범주형변수, length))) + geom_bar()
ggplot(mpg, aes(reorder(class, class, length)) + geom_bar() + coord_flip()
labs(x = '자동차 종류')
## 빈도 순으로 막대를 표시하는 함수
### ggplot(데이터, aes(x = reorder(범주형변수, 범주형변수, length))) + geom_bar()
### reorder(범주형변수, 기준변수, 함수)
ggplot(mpg, aes(reorder(class, class, length))) +
geom_bar() +
coord_flip() +
labs(x = '자동차 종류')
ggplot(course, aes(year)) + geom_bar()
ggplot(course, aes(reorder(year, year, length))) + geom_bar()
reorder(course$gender, course$score, mean)
ggplot(course, aes(reorder(gender, score, mean), score)) + geom_boxplot()
# 파이 차트 : pie(빈도표)
pie(dataYear, main = '학년별 수강생 비율')
labes <- paste0(names(dataYear), '학년:', round(propotions(dataYear) * 100, 2))
labes <- paste0(names(dataYear), '학년:', round(proportions(dataYear) * 100, 2))
labes
labes <- paste0(names(dataYear),
'학년:', round(proportions(dataYear) * 100, 2), %)
labes <- paste0(names(dataYear),
'학년:', round(proportions(dataYear) * 100, 2), '%')
labes
labels <- paste0(names(dataYear),
'학년:', round(proportions(dataYear) * 100, 2), '%')
labels
pie(dataYear, main = '학년별 수강생 비율', label = labels)
# 범주형 변수들 간의 상관성을 수치로 요약하는 방법 - 교차표
## 절대 빈도로 교차표(분할표)를 만든다.
### table() - base, xtabs() - stat, acast()나 dcast() - reshape 2 패키지, count() - dplyr
#### table() 함수를 이용한 교차표
#### table(벡터1, 벡터2, ….)
#### table(df$v1, df$v2, ….)
table(course$gender, course$year)
table(course$year, course$gender)
table(course$gender, course$year, course$class)
table(course$gender, course$year, course$class)
# xtabs() 함수를 이용해서 교차표
data <- xtabs(~gender + year, course)
data
# 범주형 변수들 간의 상관성을 수치로 요약하는 방법 - 교차표
## 절대 빈도로 교차표(분할표)를 만든다.
### table() - base, xtabs() - stat, acast()나 dcast() - reshape 2 패키지, count() - dplyr
#### table() 함수를 이용한 교차표
#### table(벡터1, 벡터2, ….)
#### table(df$v1, df$v2, ….)
table(course$gender, course$year)
xtabs( ~ gender + year, course, score >= 80)
# 두 범주형 변수의 누적막대 그래프
ggplot(course, aes(x = year, fill = gender)) + geom_bar()
ggplot(course, aes(x = year, fill = gender)) + geom_bar(position = 'dodge')
ggplot(course, aes(gender, year)) + geom_bar(position = 'dodge')
ggplot(course, aes(x = gender, fill = year)) + geom_bar(position = 'dodge')
# 상대 빈도를 이용한 막대 그래프
ggplot(course, aes(x = year, fill = gender)) + geom_bar(position = 'fill')
# 모자이크 그래프 : ggmosiac
## 패키지 설치
install.packages('vcd')
## mosaic(범주형변수2 ~ 범주형변수1, data, direction = 'v')
library(vcd)
mosaic(gender ~ year, course, direction = 'v')
# ----------------------------------------------------------------------------------------------
# 관절염 치료 임상시험 데이터 분석
# ----------------------------------------------------------------------------------------------
Arthritis
str(Arthritis)
# ----------------------------------------------------------------------------------------------
# 관절염 치료 임상시험 데이터 분석
# ----------------------------------------------------------------------------------------------
View(Arthritis)
help(Arthritis)
# 문제 정의
## 1. 새로운 치료법은 효과가 있는가?
## 치료법(Treatment)과 증상 개선 여부
Arthritis %>%
group_by(Treatment, Improved) %>%
summarise(n = n())
mosaic(Treatment ~ Improved, Arthritis, direction = 'v')
## 2. 새로운 치료법의 효과는 성별로 차이가 있는가?
## None < Some < Marked
mosaic(Sex ~ Improved, Arthritis, direction = 'v')
ggplot(Arthritis, aes(Treatment, fill = Improved)) + geom_bar(position = 'dodge')
## 2. 새로운 치료법의 효과는 성별로 차이가 있는가?
## None < Some < Marked
ggplot(Arthritis, aes(Sex, fill = Improved)) + geom_bar(position = 'dodge')
# 문제 정의
## 1. 새로운 치료법은 효과가 있는가?
## 치료법(Treatment)과 증상 개선 여부
summary(Arthritis)
tti <- xtabs(~Treatment + Improved, Arthritis)
tti
tti <- xtabs(~Treatment + Improved, Arthritis, subset = Sex == 'Female')
tti
t_f <- xtabs(~Treatment + Improved, Arthritis, subset = Sex == 'Female')
t_F
t_f
t_m <- xtabs(~Treatment + Improved, Arthritis, subset = Sex == 'Male')
t_m
rbind(t_f, t_m)
gridExtra
data <- rbind(t_f, t_m)
# 문제 정의
## 1. 새로운 치료법은 효과가 있는가?
## 치료법(Treatment)과 증상 개선 여부
check <- xtabs(~Treatment + Improved, Arthritis)
check
round(proportions(check, margin = 1) * 100, 2)
## 가설검정 : 통계적인 의미가 있는지 살펴보기 위해
## 카이제곱 검정(Chi-Square test) : 두 범주형 변수가 서로 상관이 있는지 판단
## 귀무가설 - 차이가 없다.
## 대립가설 - 차이가 있다.
chisq.test(check)
ggplot(Arthritis, aes(Treatment, fill = Improved)) + geom_bar(position = 'dodge')
mosaic(Treatment ~ Improved, Arthritis, direction = 'v')
ggplot(Arthritis,
aes(Treatment, fill = Improved)) + geom_bar(position = 'dodge')
ggplot(Arthritis,
aes(Treatment, fill = Improved)) + geom_bar(position = 'fill')
tsi_placebo <- xtabs(~ Sex + Improved, Arthritis, subset = Treatment == 'Placebo')
tsi_placebo
proportions(tsi_placebo, margin = 1)
fisher.test(tsi_placebo)
tsi_treated <- xtabs(~ Sex + Improved, Arthritis, subset = Treatment == 'Treated')
tsi_treated
proportions(tsi_treated, margin = 1)
fisher.test(tsi_treated)
ggplot(Arthritis, aes(x = Treated, fill = Improved)) + geom+bar(position = 'dodge')
ggplot(Arthritis, aes(x = Treated, fill = Improved)) + geom_bar(position = 'dodge')
ggplot(Arthritis, aes(x = Treated, fill = Improved)) +
geom_bar(position = 'dodge') +
facet_wrap(~Sex)
ggplot(Arthritis, aes(x = Treatment, fill = Improved)) +
geom_bar(position = 'dodge') +
facet_wrap(~Sex)
ggplot(Arthritis, aes(x = Treatment, fill = Improved)) +
geom_bar(position = 'fill') +
facet_wrap(~Sex)
# ----------------------------------------------------------------------------------------------
# 이혼에 대한 사회조사 데이터 셋
# ----------------------------------------------------------------------------------------------
BrokenMarriage
# ----------------------------------------------------------------------------------------------
# 이혼에 대한 사회조사 데이터 셋
# ----------------------------------------------------------------------------------------------
BrokenMarriage
# ----------------------------------------------------------------------------------------------
# 이혼에 대한 사회조사 데이터 셋
# ----------------------------------------------------------------------------------------------
?BrokenMarriage
xtabs(~gender + broken, BrokenMarriage)
# xtabs(빈도변수 ~ 범주형변수+…., data)
tgb <- xtabs(Freq ~ gender + broken, BrokenMarriage)
tgb
proportions(tgb, 1)
chisq.test(tgb)
source("C:/K_digital/R/source/Day006/__.R", echo=TRUE)
trb
proportions(trb, 2)
chisq.test(trb)
tgb
## geom_bar() 보다는 geom_col()
## ggplot(data, aes(x = 범주형변수, y = 빈도변수)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col(position = dodge / fill)
gggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) + geom_col
## geom_bar() 보다는 geom_col()
## ggplot(data, aes(x = 범주형변수, y = 빈도변수)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col(position = dodge / fill)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) + geom_col
## geom_bar() 보다는 geom_col()
## ggplot(data, aes(x = 범주형변수, y = 빈도변수)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col(position = dodge / fill)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) + geom_col() +
facet_wrap(~ gender)
## geom_bar() 보다는 geom_col()
## ggplot(data, aes(x = 범주형변수, y = 빈도변수)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col(position = dodge / fill)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) +
geom_col(position = 'fill') +
facet_wrap(~ gender)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) +
geom_col(position = 'dodge') +
facet_wrap(~ gender)
## geom_bar() 보다는 geom_col()
## ggplot(data, aes(x = 범주형변수, y = 빈도변수)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col()
## ggplot(data, aes(x = 범주형변수1, y = 빈도변수, fill = 범주형변수2)) + geom_col(position = dodge / fill)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) +
geom_col(position = 'fill') +
facet_wrap(~ gender)
geom_col( +
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) +
geom_col() +
facet_wrap(~ gender)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) +
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) +
geom_col() +
facet_wrap(~ gender)
ggplot(BrokenMarriage, aes(x = rank, y = Freq, fill = broken)) +
geom_col(position = 'fill') +
facet_wrap(~ gender)
